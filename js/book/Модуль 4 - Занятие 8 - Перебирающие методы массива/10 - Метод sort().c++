===Метод sort()===
---
Метод sort() сортирует элементы массива, 
но в отличии от остальных перебирающих методов, 
он сортирует исходный массив.
---
- Сортирует и изменяет исходный массив.
- Возвращает изменённый массив, то есть ссылку на отсортированный исходный.
- По умолчанию сортирует по возрастанию.
- Сортировка происходит путём приведения значений к строке 
и сравнения порядковых номеров в таблице Unicode.
- Такой массив чисел будет отсортирован по возврастанию.
---
const scores = [61, 19, 74, 35, 92, 56];
scores.sort();
console.log(scores); // [19, 35, 56, 61, 74, 92]
---
Но, так как по умолчанию значения приводятся к строке, 
стандартная сортировка чисел работает необычно. 
Поэтому в следующем упражнении мы рассмотрим как задавать свой порядок сортировки.
---
const scores = [27, 2, 41, 4, 7, 3, 75];
scores.sort();
console.log(scores); // [2, 27, 3, 4, 41, 7, 75]
---
Массив строк сортируется по алфавиту.
---
const students = ["Вика", "Андрей", "Олег", "Юля", "Борис", "Катя"];
students.sort();
console.log(students); // [ 'Андрей', 'Борис', 'Вика', 'Катя', 'Олег', 'Юля' ]
---
При этом порядковый номер заглавных букв меньше чем у прописных.
---
const letters = ["b", "B", "a", "A", "c", "C"];
letters.sort();
console.log(letters); // ['A', 'B', 'C', 'a', 'b', 'c']
---
Из-за того, что сортируется исходный массив, 
нарушается принцип чистоты функций и нельзя удобно сделать несколько производных коллекций на базе исходной. 
Например, сделать коллекцию отсортированную по возрастанию, 
а другую по убыванию. 
Поэтому перед сортировкой делают полную копию исходного массива 
и сортируют уже её.
---
const scores = [61, 19, 74, 35, 92, 56];
const ascendingScores = [...scores].sort();
console.log(scores); // [61, 19, 74, 35, 92, 56]
console.log(ascendingScores); // [19, 35, 56, 61, 74, 92]
---
===Свой порядок сортировки чисел===
---
Для указания своего порядка сортировки методу sort(compareFunction) 
нужно передать коллбек-функцию с двумя параметрами. 
Это функция сравнения (compare function), порядок сортировки зависит от её результата. 
Метод sort() будет вызывать её для произвольных двух элементов.
---
массив.sort((a, b) => {
  // Тело коллбек-функции
});
---
- a - первый элемент для сравнения.
- b - второй элемент для сравнения.
---
Если вызов compareFunction(a, b) возвращает любое отрицательное значение, 
то есть a меньше b, сортировка поставит a перед b. 
Это сортировка по возрастанию.
---
const scores = [61, 19, 74, 35, 92, 56];
const ascendingScores = [...scores].sort((a, b) => a - b);
console.log(ascendingScores); // [19, 35, 56, 61, 74, 92]
---
Если вызов compareFunction(a, b) возвращает любое положительное значение больше нуля,
то есть b больше a, сортировка поставит b перед a. 
Это сортировка по убыванию.
---
const scores = [61, 19, 74, 35, 92, 56];
const descendingScores = [...scores].sort((a, b) => b - a);
console.log(descendingScores); // [92, 74, 61, 56, 35, 19]
---
Eсли вызов compareFunction(a, b) вернёт 0, 
сортировка оставит a и b неизменными по отношению друг к другу,
но отсортирует их по отношению ко всем другим элементам. 
Но вообще не важно, что возвращать, 
если их взаимный порядок не имеет значения.
---
===Свой порядок сортировки строк===
---
Для сортировки строк в алфавитном порядке, по возрастанию или убыванию, 
используется метод строк localeCompare().
---
firstString.localeCompare(secondString)
---
Он вызывается на строке которую нужно сравнить (firstString) с той, 
что передана ему как аргумент (secondString).
---
"a".localeCompare("b"); // -1
"b".localeCompare("a"); // 1
"a".localeCompare("a"); // 0
"b".localeCompare("b"); // 0
---
- Возвращает отрицательное значение если firstString должна быть перед secondString.
- Возвращает положительное значение больше нуля если firstString должна быть после secondString.
- Если строки одинаковы, возвращается ноль.
---
Это удобно использовать при сортировке строк, 
так как метод sort() ожидает такие же значения от коллбек-функции.
---
const students = ["Вика", "Андрей", "Олег", "Юля", "Борис", "Катя"];
const inAlphabetOrder = [...students].sort((a, b) => a.localeCompare(b));
console.log(inAlphabetOrder); // ['Андрей', 'Борис', 'Вика', 'Катя', 'Олег', 'Юля']
const inReversedOrder = [...students].sort((a, b) => b.localeCompare(a));
console.log(inReversedOrder); // ['Юля', 'Олег', 'Катя', 'Вика', 'Борис', 'Андрей']
---
===Сортировка объектов===
---
При работе с массивом объектов сортировка выполняется 
по числовому или строчному значению какого-то свойства. 
Например, есть группа студентов с баллами за тест. 
Необходимо отсортировать массив объектов по возрастанию 
и убыванию количества баллов, и по имени студента.
---
const students = [
  { name: "Манго", score: 83 },
  { name: "Поли", score: 59 },
  { name: "Аякс", score: 37 },
  { name: "Киви", score: 94 },
];
const inAscendingScoreOrder = students.sort(
  (firstStudent, secondStudent) => firstStudent.score - secondStudent.score
);
const inDescendingScoreOrder = students.sort(
  (firstStudent, secondStudent) => secondStudent.score - firstStudent.score
);
const inAlphabeticalOrder = students.sort((firstStudent, secondStudent) =>
  firstStudent.name.localeCompare(secondStudent.name)
);
---
