======Стек вызовов======
При вызове функции, внутри её тела могут вызываться другие функции, а в них другие и т.д.JavaScript однопоточный язык, то есть в одну единицу времени может выполняться только одна инструкция.Это значит, что уже вызванные функции, которые не закончили свое выполнение, должны ждать выполнения функций вызванных внутри себя, для того, чтобы продолжить свою работу.
function fnA() {
  console.log("Лог внуртри функции fnA до вызова fnB");
  fnB();
  console.log("Лог внуртри функции fnA после вызова fnB");
}

function fnB() {
  console.log("Лог внутри функции fnB");
}

console.log("Лог перед вызовом fnA");
fnA();
console.log("Лог после вызова fnA");

// "Лог перед вызовом fnA"
// "Лог внуртри функции fnA до вызова fnB"
// "Лог внутри функции fnB"
// "Лог внуртри функции fnA после вызова fnB"
// "Лог после вызова fnA"

====== Стек ======
Стек вызовов(call stack) - это механизм для отслеживания текущего местонахождения интерпретатора в коде, который вызывает несколько функций.Какая из функций выполняется на данный момент, какие функции вызываются изнутри выполняемой функции, какая будет вызвана следующей и т.д.
Когда скрипт вызывает функцию, интерпретатор добавляет её в стек вызовов и начинает выполнение.
------
Любые функции, вызванные выполняемой функцией, добавляются в стек вызовов и выполняются, как только происходит их вызов.
Когда выполнение функции завершено, интерпретатор снимает её со стека вызовов и возобновляет выполнение кода с той точки, где остановился до этого.То есть начинает выполняться функция, запись которой лежит следующей на стеке.
------
function bar() {
  console.log("bar");
}

function baz() {
  console.log("baz");
}

function foo() {
  console.log("foo");
  bar();
  baz();
}

foo();
При выполнении этого кода сначала вызывается foo(), затем внутри foo() вызывается bar(), а затем baz().Вызовы console.log() так же учитываются, ведь это функция.На иллюстрации ниже пошагово изображен стек вызовов для примера.

====== Переполнение стека вызовов ======
Стек вызовов не безграничный, ему отводится конечный объем памяти. Иногда в консоли можно увидеть ошибку "Uncaught RangeError: Maximum call stack size exceeded" - переполнение стека (stack overflow).

Это может произойти при неправильном использовании рекурсии или зацикливании вызовов функций, то есть, если идут бесконечные вызовы функций и результат не возвращается, то стек увеличивается. По достижению предела количества записей стека и возникнет такая ошибка и скрипт «падает».