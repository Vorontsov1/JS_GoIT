======Циклы
Частая задача программирования - выполнение однотипного действия много раз
------
======Цикл while
Цикл с предусловием — цикл, который выполняется пока истинно некоторое условие, указанное перед его началом. Это условие проверяется до выполнения тела цикла, поэтому тело может быть не выполнено ни разу, если условие с самого начала ложно.
while (condition) {
  // код, тело цикла (statement)
}
------
Конструкция while создает цикл, который выполняет блок кода, пока условие проверки оценивается как true.

-condition, то есть условие, вычисляется перед каждой итерацией цикла.
-Если condition оценивается как true, оператор while выполняет statement.
-Если condition оценивается как false, выполнение цикла прерывается и скрипт продолжает выполнять инструкции после цикла while.
------
Сделаем счетчик.
let counter = 0;

while (counter < 10) {
  console.log("counter: ", counter);
  counter += 1;
}
------
Будем заполнять места в отеле до тех пор пока текущее количество клиентов не будет равно максимально допустимому.
let clientCounter = 18;
const maxClients = 25;

while (clientCounter < maxClients) {
  console.log(clientCounter);
  clientCounter += 1;
}
======Цикл do...while
Цикл с постусловием - цикл, в котором условие проверяется после выполнения тела цикла. Отсюда следует, что тело всегда выполняется хотя бы один раз.
Конструкция do...while создает цикл, который выполняет блок кода до тех пор, пока condition не вернёт false.
let password = "";

do {
  password = prompt("Введите пароль длиннее 4-х символов", "");
} while (password.length < 5);

console.log("Ввели пароль: ", password);

======Цикл for
Цикл со счётчиком - цикл, в котором некоторая переменная изменяет своё значение от заданного начального до конечного значения с некоторым шагом и для каждого значения этой переменной тело цикла выполняется один раз.
for (initialization; condition; post-expression) {
  // statements
}
------
Переменные-счетчики, по традиции, называются буквами i, j и k.
for (let i = 0; i <= 20; i += 5) {
  console.log(i);
}
------
Посчитаем сумму чисел до определенного значения.
const target = 3;
let sum = 0;

for (let i = 0; i <= target; i += 1) {
  sum += i;
}

console.log(sum);
------
Вспомним про операцию a % b и выведем остаток от деления используя цикл.
const max = 10;
for (let i = 0; i < max; i += 1) {
  console.log(`${max} % ${i} = `, max % i);
}

======Оператор break
Прервать выполнение цикла можно в любой момент. Для этого сущестует оператор break, который полностью прекращает выполнение цикла и передаёт управление на строку за его телом.
for (let i = 0; i <= 5; i += 1) {
  console.log(i);

  if (i === 3) {
    console.log("Нашли число 3, прерываем выполнение цикла");
    break;
  }
}

console.log("Лог после цикла");

======Оператор continue
Прерывает не весь цикл, а только выполнение текущей итерации. Его используют, если понятно, что на текущей итерации цикла делать больше нечего или вообще ничего делать не нужно и пора переходить на следующую итерацию.
const number = 10;

for (let i = 0; i < number; i += 1) {
  if (i % 2 === 0) {
    continue;
  }

  console.log("Нечетное i: ", i); // 1, 3, 5, 7, 9
}

